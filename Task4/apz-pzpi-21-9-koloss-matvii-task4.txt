2 РОЗРОБКА КЛІЄНТСЬКОЇ ЧАСТИНИ
2.1 Архітектура системи

У цьому розділі було проведено концептуальне моделювання предметної області онлайн-каталогу товарів. З метою з'ясування функціональних можливостей системи та її взаємодії з користувачами була побудована Use Case діаграма (див. рис. 1.1).
Діаграма ER-моделі демонструє структуру бази даних та взаємозв'язки між різними сутностями. Кожна сутність представляє окремий об'єкт у системі, а атрибути цих сутностей визначають їх властивості. Зв'язки між сутностями вказують на взаємозв'язки між ними та як вони пов'язані один з одним.
На наведеній ER-діаграмі (див. рис. 2.2) відображено взаємозв'язки між адміністраторами, товаром тощо. Вона допомагає краще зрозуміти, як дані будуть зберігатися та як вони пов'язані між собою.
Розглядаючи цю діаграму, можна отримати більше уявлення про структуру та організацію даних у базі даних, що значно сприятиме подальшій роботі з проектуванням та використанням цієї системи.
Діаграма компонентів, показана на рисунку 2.3, відображає складові частини системи та їх взаємозв'язки. Це допоможе зрозуміти, які компоненти входять до системи, як вони взаємодіють між собою та яка функціональність призначена для кожного компонента. Такий огляд структури системи є важливим етапом у проектуванні програмного забезпечення та сприяє розумінню системи як цілісного продукту.
Діаграма компонентів відображає структуру онлайн каталогу та її основні складові: каталог, клієнти, системи контролю та обліку тощо. Лінії на діаграмі показують взаємозв'язки між цими компонентами, що допомагає забезпечити збалансоване та ефективне функціонування каталогу. Ця діаграма сприяє кращому розумінню взаємодії та організації компонентів системи.
Діаграма пакетів, наведена на рисунку 2.4, відображає структуру серверної частини програмної системи. Вона допомагає систематизувати різні модулі та компоненти, які використовуються у програмі, щоб краще зрозуміти їх взаємозв'язки та організацію.
Розглянувши функціональні можливості та взаємодію із користувачами системи, було побудовано діаграму діяльності. Ця діаграма відображає послідовність дій користувачів під час взаємодії з онлайн-каталогом та програмою обліку. Починаючи з перегляду доступних товарів, користувач може виконувати різноманітні дії. Для адміністраторів передбачені додаткові функції, такі як управління товаром та користувачами. Взаємодія з системою передбачає обробку запитів та відповідність на них, а також збереження та оновлення даних у базі даних. Крім того, система забезпечує безпеку даних та захист інформації користувачів, використовуючи відповідні механізми автентифікації та авторизації. Діаграма діяльності допомагає краще зрозуміти процес взаємодії користувачів з системою та послідовність дій, які вони можуть виконувати. Вона є важливим інструментом у проектуванні та розробці програмного забезпечення, дозволяючи визначити потрібні функції та їх взаємозв'язки для задоволення потреб користувачів. Дана діаграма зрображена на рисунку 2.5.
Після аналізу діаграми діяльності стає очевидним, як система онлайн-каталогу та програма організації обліку дозволяє користувачам зручно та ефективно взаємодіяти з платформою.
Чітко відображено послідовність операцій, які вони можуть виконувати, що сприяє легкому орієнтуванню та користуванню сервісом. Як результат, ця система забезпечує високий рівень зручності та доступності для всіх користувачів, незалежно від їх потреб. Такий підхід до дизайну інтерфейсу дозволяє створити платформу, що задовольняє потреби широкого кола користувачів та сприяє позитивному досвіду використання. Загалом, діаграма діяльності створює чітке уявлення про те, як функції та можливості системи реалізовані на рівні взаємодії з користувачем, що є важливим кроком у процесі розробки та вдосконалення програмного забезпечення.

2.2 Опис інтерфейсу

У цьому розділі ми розглянемо процес створення інтерфейсу для організації обліку та онлайн-каталогу товарів в рамках нашої системи. Цей інтерфейс складається з двох основних етапів: панель адміністрування та сам каталог, доступний для клієнтів.
Почнемо з панелі адміністрування. Для входу в неї користувач повинен авторизуватися в системі, використовуючи власний обліковий запис. У нашій системі існують дві ролі: менеджер та адміністратор.
Перша сторінка, яку ми розглянемо, — це сторінка з товарами. Вона доступна для менеджерів та адміністраторів і дозволяє переглядати, додавати, редагувати та видаляти товари з каталогу. На цій сторінці реалізована система пагінації для зручності навігації, оскільки кількість товарів може бути значною. При додаванні нового товару користувач може завантажити до 10 фотографій, які будуть відображатися на сторінці.
Друга сторінка — це категорії товарів. Вона також доступна для менеджерів та адміністраторів і дозволяє додавати, редагувати та видаляти категорії товарів. Категорії в системі допомагають у зручному пошуку товарів та можуть бути організовані як батьківські та дочірні категорії.
Сторінка сайтів призначена для адміністрування та доступна менеджерам та адміністраторам. Вона дозволяє прив'язувати товари до різних сайтів, таких як Ebay або OLX, що полегшує управління та моніторинг присутності товарів на різних платформах.
Сторінка користувачів доступна тільки адміністратору і дозволяє керувати обліковими записами менеджерів, включаючи створення нових облікових записів, редагування паролів та видалення користувачів.
Тепер перейдемо до самого каталогу. Каталог містить дві сторінки: сторінку товарів та сторінку перегляду окремого товару.
На сторінці товарів користувач може скористатися системою пагінації, а також здійснити пошук товарів за назвою або фільтрувати їх за категорією.
На сторінці перегляду товару клієнт може ознайомитися з описом товару, його характеристиками та подивитися фотографії.

2.3 Використані технології

При розробці клієнтської частини системи я використовував ряд сучасних технологій для забезпечення ефективності та функціональності інтерфейсу. Основною технологією, яку я використовував, був React.js [1], який дозволяє створювати динамічні та високопродуктивні веб-додатки. Використання React [1] дозволило швидко реагувати на зміни даних та забезпечити інтерактивність користувачеві. Для забезпечення безпеки та надійності використовував TypeScript [2], який надає статичну типізацію та допомагає у виявленні помилок на етапі розробки.
Також, для кращої організації коду та його модульності, використовував компонентний підхід у розробці інтерфейсу, розділяючи його на невеликі, незалежні компоненти. Для управління станом додатку та зв'язку між компонентами використовував бібліотеку управління станом MobX. Щоб забезпечити адаптивність інтерфейсу та оптимізувати його для різних пристроїв та розмірів екрану, використовував CSS для стилів. Для роботи з асинхронними запитами до сервера та обміну даними в реальному часі використовував технологію axios. На рівні розробки інтерфейсу також використовував інструменти для збірки та оптимізації коду, такі як Webpack або Parcel, для забезпечення швидкої та ефективної роботи додатку в реальному середовищі. Використання цих технологій допомогло створити сучасний та ефективний інтерфейс для системи онлайн-каталогу та програми організації обліку.
Крім того, для реалізації мультиязичності та локалізації сторінок була використана бібліотека i18n [4]. Це дозволило легко налаштовувати переклади інтерфейсу для різних мов та регіонів, забезпечуючи зручність використання додатку для користувачів з різних країн та культур. Реалізація мультиязичності за допомогою бібліотеки i18n [4] сприяла покращенню доступності та дослідженню нових ринків. Такий підхід дозволяє зробити додаток більш глобальним та привабливим для різних аудиторій.
Існує метод convertImageLinkIntoFile (див. додаток А.1) і потрібен він для конвертації зображення з посилання у Blob, а далі у файл для редагування товару та його зображень.
Функція getCategoryFullName потрібна для отримання назви категорії в залежності від вибраної мови на сайті. Функція показано у додатку А.2.

